{"name":"Ralipay","tagline":"","body":"# Ralipay\r\n\r\nA ruby Gem for Alipay, contains web payment and mobile client payment\r\n\r\n- [https://rubygems.org/gems/ralipay](https://rubygems.org/gems/ralipay)\r\n\r\n- [https://github.com/RaymondChou/ralipay](https://github.com/RaymondChou/ralipay)\r\n\r\n- sinatra example [https://github.com/RaymondChou/ralipay_sinatra](https://github.com/RaymondChou/ralipay_sinatra)\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'ralipay'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install ralipay\r\n\r\n## API\r\n\r\n    Ralipay::WapPayment.new\r\n\r\n    Ralipay::WapPayment.generate_pay_url\r\n\r\n    Ralipay::WapPayment.callback_verify?\r\n\r\n    Ralipay::WapPayment.callback_verify\r\n\r\n    Ralipay::WapPayment.notify_verify?\r\n\r\n    Ralipay::WapPayment.notify_verify\r\n\r\n    Ralipay::ClientPayment.notify_verify?\r\n\r\n    Ralipay::ClientPayment.notify_verify\r\n\r\n    Ralipay::ClientPayment.callback_verify?\r\n\r\n    Ralipay::Common::build_sign\r\n\r\n    Ralipay::Common::create_link_string\r\n\r\n    Ralipay::Common::rsa_sign\r\n\r\n    Ralipay::Common::md5_sign\r\n\r\n    Ralipay::Common::verify?\r\n\r\n    Ralipay::Common::para_filter\r\n\r\n    Ralipay::Common::decrypt\r\n\r\n\r\n## Usage\r\n\r\n### 准备\r\n\r\n- 申请你的支付宝商户服务\r\n\r\n- 取调用支付宝支付接口的账户信息\r\n\r\n- 并使用openssl工具生成好公钥与私钥(建议使用RSA加密方式)\r\n\r\n### 生成一个商品的WAP支付地址\r\n\r\n准备好参数:configs(hash symbol)\r\n\r\n    configs = {\r\n            :partner => '0000000000000',  #商户id partner_id\r\n            :seller_email => 'service@iiseeuu.com',  #商户email\r\n            :rsa_private_key_path => '/Users/ZhouYT/Desktop/rsa_private_key.pem',  #私钥绝对路径\r\n            :rsa_public_key_path  => '/Users/ZhouYT/Desktop/alipay_public_key.pem',  #公钥绝对路径\r\n            :subject => '测试商品',  #商品名称\r\n            :out_trade_no => '1222222233',  #外部交易号,不能重复\r\n            :total_fee => '0.01',  #交易价格\r\n            :notify_url => 'http://xx.xx.xx.xx/xx/xx',  #服务器异步回调通知接口地址\r\n            :merchant_url => 'http://xx.xx.xx.xx/xx/xx',  #商品展示地址\r\n            :call_back_url => 'http://xx.xx.xx.xx/xx/xx'  #支付成功同步回调跳转地址\r\n        }\r\n获取url\r\n\r\n    url = Ralipay::WapPayment.new(configs).generate_pay_url\r\n\r\n将当前页面redirect到该url上\r\n\r\n### wap支付同步回调页面callback_url(get方法)\r\n\r\n同样需要上面的configs(hash symbol),在new的时候只需要配置公钥和私钥就可以了\r\n\r\n准备好当前页面获取到的get请求获取到的所有参数与值,用hash symbol形式传入\r\n\r\n    Ralipay::WapPayment.new(configs).callback_verify?(gets)\r\n\r\ncallback_verify? 方法只返回bool\r\n\r\ncallback_verify 方法返回支付状态,并安全的返回回调参数hash,失败返回false\r\n\r\n返回的hash内容:\r\n\r\n    :trade_no\r\n    :out_trade_no\r\n\r\n### wap支付异步回调接口notify_url(post方法)\r\n\r\n同样需要上面的configs(hash symbol),在new的时候只需要配置公钥和私钥就可以了\r\n\r\n准备好当前页面获取到的post请求获取到的所有参数与值,用hash symbol形式传入\r\n\r\n    Ralipay::WapPayment.new(configs).notify_verify?(posts)\r\n\r\n异步回调验证,支付宝主动通知,前端POST xml方式获得参数,该方法只返回bool\r\n\r\n成功请自行向支付宝打印纯文本success\r\n\r\n如验签失败或未输出success支付宝会24小时根据策略重发总共7次,需考虑重复通知的情况\r\n\r\nnotify_verify? 方法只返回bool\r\n\r\nnotify_verify 方法返回支付状态,并安全的返回回调参数hash,失败返回false\r\n\r\n### 客户端sdk支付异步回调通知接口notify_url(post方法)\r\n\r\n同样需要上面的configs(hash symbol),在new的时候只需要配置公钥和私钥就可以了\r\n\r\n准备好当前页面获取到的post请求获取到的所有参数与值,用hash symbol形式传入\r\n\r\n    Ralipay::ClientPayment.new(configs).notify_verify?(posts)\r\n\r\n此方法与wap支付一致,内部处理有所不同\r\n\r\n### 客户端sdk支付同步验证callback_url(post方法)\r\n\r\n客户端callback回调之后POST请求服务器callback_url\r\n\r\n前端处理时在验签通过就给客户端返回2，不通过就返回1\r\n\r\n    Ralipay::ClientPayment.new(configs).callback_verify?(posts)\r\n\r\n该方法可以不使用","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}